[{"categories":["college"],"content":"\rWarning\r此笔记由我个人整理，因此相比教材可能有出入，如果您发现有错误，欢迎和我联系！\rNote\r此笔记针对西南交通大学2022-2023学年上半学期开设的数电理论课。\r1 数字逻辑概论 ","date":"2023-01-14","objectID":"/math_electronic/:0:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.1 数字信号和数字电路 ","date":"2023-01-14","objectID":"/math_electronic/:1:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.1.1 模拟信号和数字信号 1.1.1.1 模拟信号 模拟信号是时间和数值均连续变化的电信号，如正弦波、三角波等 1.1.1.2 数字信号 数字信号是在时间上和数值上均是离散的信号。 1.1.1.3 模拟信号转换为数字信号 处理过程包括：采样、量化、编码。 ","date":"2023-01-14","objectID":"/math_electronic/:1:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.1.2 数字信号的描述方法 周期 (T) —- 表示两个相邻脉冲之间的时间间隔 脉冲宽度 ($t_{w}$)—- 脉冲幅值的50%的两个时间所跨越的时间 占空比 Q —– 表示脉冲宽度占整个周期的百分比 上升时间$t_{r}$ 和下降时间$t_{f}$ —-从脉冲幅值的10%到90% 上升 ","date":"2023-01-14","objectID":"/math_electronic/:1:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.2 数制 ","date":"2023-01-14","objectID":"/math_electronic/:2:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.2.1 二进制数和十进制数转换 1.2.1.1 辗转相除法 将十进制数连续不断地除以2 , 直至商为零，所得余数由低位到高位排列，即为所求二进制数。 1.2.1.2 从高到低比较大小 1.2.1.3 小数的转换 对于二进制的小数部分可写成 $$N_{D} = b_{-1} \\times 2^{-1} + b_{-2} \\times 2^{-2} + \\cdots + b_{-(n-1)} \\times 2^{-(n-1)} + b_{-n} \\times 2^{-n} \\tag{1} $$ 将上式两边分别乘以2，得 $$2 \\times N_{D} = b_{-1} \\times 2^{0} + b_{-2} \\times 2^{-1} + \\cdots + b_{-(n-1)} \\times 2^{-(n-2)} + b_{-n} \\times 2^{-(n-1)} \\tag{2} $$ 由此可见，将十进制小数乘以2，所得乘积的整数即为 $b_1$,不难推知，将十进制小数每次减掉上次所得积中的整数再乘以2，直到满足误差要求进行“四舍五入\"为止，就可完成由十进制小数转换成二进制小数。 Info\r对于八进制和十六进制小数，转换时，由小数点开始，整数部分自右向左，小数部分自左向右，三/四位一组，不够三/四位的添零补齐，则每三/四位二进制数表示一位八/十六进制数\r","date":"2023-01-14","objectID":"/math_electronic/:2:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.3 算数运算 ","date":"2023-01-14","objectID":"/math_electronic/:3:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.3.1 原码、反码、补码 1.3.1.1 原码 原码表示办法：正数符号位是0，负数符号位是1，数值用其绝对值的二进制数表示。例如 $$ +5 = \\boxed{0}101 \\tag{1}$$ $$ -5 = \\boxed{1}101 \\tag{2}$$ 1.3.1.2 反码 反码又称为“1的补码”，正数的反码与正码相同。求二进制负数的反码的简单办法是，符号位不变，将原码的数值逐位求反得到。 1.3.1.3 补码 补码即为反码的最低位加1所得的数 ","date":"2023-01-14","objectID":"/math_electronic/:3:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.4 二进制代码 编码:以一定的规则编制代码来区分和表示不同的数值、字母、符号等信息的过程。 二进制代码的位数(n),与需要编码的事件（或信息）的个数(N)之间应满足以下关系： $$2^{n-1}≤N≤2^{n}$$ ","date":"2023-01-14","objectID":"/math_electronic/:4:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.4.1 BCD码 从4 位二进制数16种代码中,选择10种来表示0~9个数码的方案有很多种。每种方案产生一种BCD码。 BCD码十进制数码 8421码 2421 码 5421 码 余3码 余3循环码 格雷码 0 0000 0000 0000 0011 0010 0000 1 0001 0001 0001 0100 0110 0001 2 0010 0010 0010 0101 0111 0011 3 0011 0011 0011 0110 0101 0010 4 0100 0100 0100 0111 0100 0110 5 0101 1011 1000 1000 1100 0111 6 0110 1100 1001 1001 1101 0101 7 0111 1101 1010 1010 1111 0100 8 1000 1110 1011 1011 1110 1100 9 1001 1111 1100 1100 1010 1101 10 \\ \\ \\ \\ \\ 1111 11 \\ \\ \\ \\ \\ 1110 12 \\ \\ \\ \\ \\ 1010 13 \\ \\ \\ \\ \\ 1011 14 \\ \\ \\ \\ \\ 1001 15 \\ \\ \\ \\ \\ 1000 1.4.1.1 各编码特点 有权码：编码的每一位有固定的权值 无权码：编码没有固定的权值 余3码的特点:当两个十进制的和是10时，相应的二进制和正 好是16，于是可自动产生进位信号,而不需修正.1和9, 2和8,…..6和 4的余3码。便于求10的补码。（本质上一个数的余3码就是这个数加上3的8421码） 格雷码：任何两个相邻代码之间仅有一位不同。 余3码循环码：相邻的两个代码之间仅一位的状态不同。按余3 码循环码组成计数器时，每次转换过程只有一个触发器翻转，译 码时不会发生竞争－冒险现象。（本质上一个数的余3循环码就是这个数加上3的格雷码） 1.4.1.2 用BCD码表示十进制数 对于一个多位的十进制数，需要有与十进制位数相同的几组BCD代码来表示。例如： 1.4.1.3 二进制码与格雷码的转换 二进制码$\\rightarrow$格雷码 格雷码的最高位（最左边）与二进制码的最高位相同。 从左到右，逐一将二进制码相邻的两位相加（舍去进位），作为格雷码的下一位。 格雷码$\\rightarrow$二进制码 二进制码的最高位（最左边）与格雷码的最高位相同。 将产生的每一位二进制码，与下一位相邻的格雷码相加（舍去进位），作为二进制码的下一位。 ","date":"2023-01-14","objectID":"/math_electronic/:4:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.5 二值逻辑变量与基本逻辑运算 逻辑运算的描述方式:逻辑代数表达式、真值表、逻辑图、卡诺图、波形图和硬件描述语言（HDL) 等。 ","date":"2023-01-14","objectID":"/math_electronic/:5:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.5.1 各逻辑门 ","date":"2023-01-14","objectID":"/math_electronic/:5:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.6 逻辑函数 描述输入变量和输出变量之间的因果关系称为逻辑函数 ","date":"2023-01-14","objectID":"/math_electronic/:6:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.6.1 表示办法 1.6.1.1 真值表 1.6.1.2 表达式 逻辑表达式是用与、或、非等运算组合起来，表示逻辑函数与逻辑变量之间关系的逻辑代数式。 只写使输出变量为1的项 每项之中，变量之间是与的关系 变量为1的用原变量，变量为0的用反变量 项与项之间是或的关系 1.6.1.3 逻辑图 用与、或、非等逻辑符号表示逻辑函数中各变量之间的逻辑关系所得到的图形称为逻辑图 思路：将逻辑函数式中所有的与、或、非运算符号用相应的逻辑符号代替，并按照逻辑运算的先后次序将这些逻辑符号连接起来，就得到图电路所对应的逻辑图 1.6.1.4 波形图 用输入端在不同逻辑信号作用下所对应的输出信号的波形图，表示电路的逻辑关系 ","date":"2023-01-14","objectID":"/math_electronic/:6:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.6.2 转换 1.6.2.1 真值表$\\rightarrow$逻辑图 根据真值表写出逻辑表达式 化简逻辑表达式 根据表达式画出逻辑图 1.6.2.1 逻辑图$\\rightarrow$真值表 根据逻辑图逐级写出表达式 化简变换求最简与或式 将输入变量的所有取值逐一代入表达式得真值表 2 逻辑代数与硬件描述语言 ","date":"2023-01-14","objectID":"/math_electronic/:6:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.1 逻辑代数的基本定理和恒等式 ","date":"2023-01-14","objectID":"/math_electronic/:7:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.1.1 逻辑代数的基本定律和恒等式 ","date":"2023-01-14","objectID":"/math_electronic/:7:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.1.2 逻辑代数的基本规则 2.1.2.1 对偶规则 对于任何逻辑函数式，若将其中的与（•）换成或（+），或（+）换成与（•）；并将1换成0，0换成1；那么，所得的新的函数式就是L的对偶式，记作$L’$。 当某个逻辑恒等式成立时，则该恒等式两侧的对偶式也相等。这就是对偶规则。利用对偶规则，可从已知公式中得到更多的运算公式. 2.1.2.2 反演规则 对于任意一个逻辑表达式L，若将其中所有的与（• ）换成或（+），或（+）换成与（•）；原变量换为反变量，反变量换为原变量；将1换成0，0换成1；则得到的结果就是原函数的反函数。 ","date":"2023-01-14","objectID":"/math_electronic/:7:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.2 逻辑函数表达式的形式 ","date":"2023-01-14","objectID":"/math_electronic/:8:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.2.1 基本形式 2.2.1.1 与-或表达式 若干与项进行或逻辑运算构成的表达式。由与运算符和或运算符连接起来。如： $$ L = A \\cdot C + \\bar{C} \\cdot D $$ 2.2.1.2 或-与表达式 若干或项进行与逻辑运算构成的表达式。由或运算符和与运算符连接起来。如： $$ L = ( A + C ) \\cdot ( B + \\bar{C} ) \\cdot D $$ 2.2.1.3 其他表达式 ","date":"2023-01-14","objectID":"/math_electronic/:8:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.2.2 最小项与最小项表达式 2.2.2.1 最小项的定义 n个变量$X_{1}, X_{2}, …, X_{n}$的最小项是n个因子的乘积，乘积中包含了全部n个变量，每个变量都以它的原变量或非变量的形式在乘积项中出现，且仅出现一次。一般n个变量的最小项应有$2^{n}$个 2.2.2.2 最小项的性质 对于任意一个最小项，只有一组变量取值使得它的值为1 任意两个最小项的乘积为0 全体最小项之和为1 使最小项为1的一组二进制数所对应的十进制数即为最小项的编号值。 若干个最小项的和等于其余最小项和的反。 2.2.2.3 最小项的表示 通常用$m_i$表示最小项，m 表示最小项,下标i为最小项编号。 ","date":"2023-01-14","objectID":"/math_electronic/:8:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.2.3 最大项与最大项表达式 2.2.3.1 最大项的定义 n个变量$X_1, X_2, …, X_n$的最大项是n个因子或项，每个变量都以它的原变量或非变量的形式在或项中出现，且仅出现一次。一般n个变量的最大项应有$2^n$个 2.2.3.2 最大项的性质 对于任意一个最大项，只有一组变量取值使得它的值为0 任意两个最大项的之和为1 全体最大项之积为0 2.2.3.3 最大项的表示 通常用$M_i$表示最大项，M 表示最大项,下标i为最大项号。 ","date":"2023-01-14","objectID":"/math_electronic/:8:3","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.2.4 最小项和最大项的关系 两者之间为互补关系：$m_i = \\overline{M_i} ，或者M_i = \\overline{m_i}$ ","date":"2023-01-14","objectID":"/math_electronic/:8:4","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.3 逻辑函数的代数化简法 ","date":"2023-01-14","objectID":"/math_electronic/:9:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.3.1 逻辑函数的最简形式 逻辑函数有不同形式，将其中包含的与项数最少，且每个与项中变量数最少的与-或表达式称为最简与-或表达式 ","date":"2023-01-14","objectID":"/math_electronic/:9:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.3.2 代数化简法 运用逻辑代数的基本定律和恒等式进行化简的方法 2.3.2.1 并项 $$ A + \\bar{A} = 1 $$ $$ L = \\bar{A} \\bar{B} C + \\bar{A} \\bar{B} \\bar{C} = \\bar{A} \\bar{B} ( C + \\bar{C} ) = \\bar{A} \\bar{B} $$ 2.3.2.2 吸收 $$ A + AB = A $$ $$ L = \\bar{A} B + \\bar{A} BCD ( E + F ) = AB $$ 2.3.2.3 消去 $$ A + \\bar{A} B = A + B $$ $$ L = AB + \\bar{A}C + \\bar{B}C = AB + ( \\bar{A} + \\bar{B} ) C = AB + \\overline{AB} C = AB + C $$ 2.3.3 形式变化 通常在一片集成电路芯片中只有一种门电路，为了减少门电路的种类，需要对逻辑函数表达式进行变换。一般通过两次取反可变化。 ","date":"2023-01-14","objectID":"/math_electronic/:9:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.4 逻辑函数的卡诺图化简法 ","date":"2023-01-14","objectID":"/math_electronic/:10:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.4.1 用卡诺图表示逻辑函数 2.4.1.1 引出原理 逻辑函数可以表达为若干最小项相“或”的形式； 逻辑相邻的最小项：如果两个最小项只有一个变量互为反变量，那么，就称这两个最小项在逻辑上相邻; 2.4.1.2 形式 卡诺图：将n变量的全部最小项都填在小方格阵中，并使具有逻辑相邻的最小项在几何位置上也相邻地排列起来，这样,所得到的图形叫n变量的卡诺图。 各小方格对应于各变量不同的组合，而且上下左右在几何上相邻的方格内只有一个因子有差别，这个重要特点成为卡诺图化简逻辑函数的主要依据。 2.4.1.3 画法 当逻辑函数为最小项表达式时，在卡诺图中找出和表达式中最小项对应的小方格填上1，其余的小方格填上0（有时也可用空格表示），就可以得到相应的卡诺图。任何逻辑函数都等于其卡诺图中为1的方格所对应的最小项之和。 ","date":"2023-01-14","objectID":"/math_electronic/:10:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.4.2 化简 2.4.2.1 步骤 将逻辑函数写成最小项表达式 按最小项表达式填卡诺图，凡式中包含了的最小项，其对应方格填1，其余方格填0。 合并最小项，即将相邻的1方格圈成一组(包围圈)，每一组含$2^n$个方格，对应每个包围圈写成一个新的乘积项。 将所有包围圈对应的乘积项相加。 2.4.2.2 原则 包围圈内的方格数一定是$2^n$个，且包围圈必须呈矩形。 循环相邻特性包括上下底相邻，左右边相邻和四角相邻。 同一方格可以被不同的包围圈重复包围多次，但新增的包围圈中一定要有原有包围圈未曾包围的方格。 一个包围圈的方格数要尽可能多,包围圈的数目要可能少 当卡诺图中1的个数明显多于0的个数时，可以采取圈0的方式化简，得到原逻辑函数L的反函数，然后再求反，得到L。 ","date":"2023-01-14","objectID":"/math_electronic/:10:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.4.3 无关项 在真值表内对应于变量的某些取值下，函数的值可以是任意的，或者这些变量的取值根本不会出现，这些变量取值所对应的最小项称为无关项。 Info\r在含有无关项逻辑函数的卡诺图化简中，它的值可以取0或取1，具体取什么值，可以根据使函数尽量得到简化而定。\r","date":"2023-01-14","objectID":"/math_electronic/:10:3","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.5 硬件描述语言Verilog HDL基础 ","date":"2023-01-14","objectID":"/math_electronic/:11:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.5.1 基本语法规则 2.5.1.1 间隔符 Verilog 的间隔符主要起分隔文本的作用，可以使文本错落有致，便于阅读与修改。间隔符包括空格符（\\b）、TAB 键（\\t）、换行符（\\n）及换页符。 2.5.1.2 注释符 注释只是为了改善程序的可读性,在编译时不起作用。多行注释符(用于写多行注释): /* — */；单行注释符 :以//开始到行尾结束为注释文字 2.5.1.3 标识符 给对象（如模块名、电路的输入与输出端口、变量等）取名所用的字符串。以英文字母或下划线开始如，clk、counter8、_net、bus_A 。 2.5.1.4 关键字 是Verilog语言本身规定的特殊字符串，用来定义语言的结构。例如，module、endmodule、input、output、wire、reg、and等都是关键词。关键词都是小写，关键词不能作为标识符使用 。 2.5.1.5 逻辑值集合 为了表示数字逻辑电路的逻辑状态，Verilog语言规定了4种基本的逻辑值。 val 含义 0 逻辑0、逻辑假 1 逻辑1、逻辑真 x/X 不确定 z/Z 高阻态 2.5.1.6 常量 Verilog允许用参数定义语句定义一个标识符来代表一个常量，称为符号常量。定义的格式为：parameter 参数名1＝常量表达式1，参数名2＝常量表达式2，……；如 parameter BIT=1, BYTE=8, PI=3.14; 2.5.1.7 变量的数据类型 线网类型:是指输出始终根据输入的变化而更新其值的变量,它一般指的是硬件电路中的各种物理连接,常用的网络类型由关键词wire定义wire型变量的定义格式如下：wire [n-1:0] 变量名1，变量名2，…，变量名n； 例: wire L; //将上述电路的输出信号L声明为网络型变量 wire [7:0] data bus; //声明一个8-bit宽的网络型总线变量 寄存器类型:寄存器型变量对应的是具有状态保持作用的电等路元件,如触发器寄存器。寄存器型变量只能在initial或always内部被赋值 寄存器类型(不对应具体硬件) 功能说明 reg 常用的寄存器型变量 integer 32位带符号的整数型变量 real 64位带符号的实数型变量 time 64位无符号的时间变量 例: reg clock;//定义一个1位寄存器变量 reg [3:0] counter; //定义一个4位寄存器变量 ","date":"2023-01-14","objectID":"/math_electronic/:11:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.5.3 运算符及优先级 ","date":"2023-01-14","objectID":"/math_electronic/:11:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.5.4 门级元件 元件符号 功能说明 元件符号 功能说明 and 多输入端的与门 nand 多输入端的与非门 or 多输入端的或门 nor 多输入端的或非门 xor 多输入端的异或门 xnor 多输入端的异或非门 buf 多输出端的缓冲器 not 多输出端的反相器 bufif1 控制信号高电平有效的三态缓冲器 notif1 控制信号高电平有效的三态反相器 bufif0 控制信号低电平有效的三态缓冲器 notif0 控制信号低电平有效的三态反相器 ","date":"2023-01-14","objectID":"/math_electronic/:11:3","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.5.5 程序的基本结构 模块是Verilog描述电路的基本单元。对数字电路建模时，用一个或多个模块。不同模块之间通过端口进行连接。 每个模块以关键词module开始，以endmodule结束。 每个模块先要进行端口的定义，并说明输入（input)和输出（output),然后对模块功能进行描述。 除了endmodule语句外，每个语句后必须有分号。 可以用/* — */和//…..对程序的任何部分做注释。 逻辑功能的描述方式有三种不同风格：结构描述方式（门级描述方式,元件列表）、数据流描述方式(assign)，行为描述方式(always) 2.5.5.1 电路模块定义的一般结构 module 模块名（端口名1, 端口名2, 端口名3,…）； 端口类型说明(input, output, inout)； 参数定义(可选)； 数据类型定义(wire, reg等)； 实例化低层模块和基本门级元件； 连续赋值语句（assign）； 过程块结构（initial和always） 行为描述语句； endmodule 2.5.5.2 描述风格 4 组合逻辑电路 ","date":"2023-01-14","objectID":"/math_electronic/:11:4","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.1 组合逻辑电路的分析 ","date":"2023-01-14","objectID":"/math_electronic/:12:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.1.1 定义 其输出状态在任何时刻只取决于同一时刻的输入状态，而与电路原来的状态无关的逻辑电路。 ","date":"2023-01-14","objectID":"/math_electronic/:12:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.1.2 结构特征 输出、输入之间没有反馈延迟通路， 不含记忆单元 ","date":"2023-01-14","objectID":"/math_electronic/:12:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.1.3 分析步骤 由逻辑图写出各输出端的逻辑表达式； 化简和变换逻辑表达式； 列出真值表； 根据真值表或逻辑表达式，经分析最后确定其功能。 ","date":"2023-01-14","objectID":"/math_electronic/:12:3","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.2 组合逻辑电路的设计 ","date":"2023-01-14","objectID":"/math_electronic/:13:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.2.1 步骤 逻辑抽象：根据实际逻辑问题的因果关系确定输入、输出变量，并定义逻辑状态的含义； 根据逻辑描述列出真值表； 由真值表写出逻辑表达式; 简化和变换逻辑表达式，画出逻辑图。 ","date":"2023-01-14","objectID":"/math_electronic/:13:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.3 组合逻辑电路中的竞争和冒险 ","date":"2023-01-14","objectID":"/math_electronic/:14:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.3.1 原因 ","date":"2023-01-14","objectID":"/math_electronic/:14:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.3.2 检查方法 4.3.2.1 代数法 对具备竞争条件的某变量，将除该变量外其他变量取0或1，若原函数可化成 A+$\\bar{A}$或A$\\cdot \\bar{A}$的形式,则A存在冒险。 4.3.2.2 卡诺图 画出卡诺图，若存在两个相切的卡诺圈，且这个相切的部分没有被另外的卡诺圈包围，则必定存在冒险。 ","date":"2023-01-14","objectID":"/math_electronic/:14:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.3.3 消除办法 4.3.3.1 发现并消除互补变量 4.3.3.2 增加乘积项 ","date":"2023-01-14","objectID":"/math_electronic/:14:3","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.4 若干典型的组合逻辑电路 ","date":"2023-01-14","objectID":"/math_electronic/:15:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.4.1 编码器 能将每一个编码输入信号变换为不同的二进制的代码输出。 Warning\r普通编码器不能有两个或以上有效输入。\r4.4.1.1 分类 普通编码器：任何时候只允许输入一个有效信号，否则输出就会发生混乱。 优先编码器：允许同时输入两个以上的有效编码信号。当同时输入几个有效编码信号时，优先编码器能按预先设定的优先级别，只对其中优先权最高的一个进行编码。 4.4.1.2 典型 4线─2线普通二进制编码器 键盘电路图 键盘真值表 cd4532优先编码器示意图 cd4532优先编码器真值表 用二片CD4532构成16线-4线优先编码器 74HC147真值表 ","date":"2023-01-14","objectID":"/math_electronic/:15:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.4.2 译码器/数据分配器 译码：译码是编码的逆过程，它能将二进制码翻译成代表某一特定含义的信号.(高低电平信号) 译码器：具有译码功能的逻辑电路称为译码器。 4.4.2.1 2线-4线译码器（74HC139） 4.4.2.2 3线-8线译码器（74HC138) 4.4.2.3 应用 Info\r$D_i$是$A_i$和$B_i+C_{i-1}$的差关于2的模。 $C_i$是借位标志。\r4.4.2.4 七段显示译码器(74HC4511) ","date":"2023-01-14","objectID":"/math_electronic/:15:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.4.3 数据选择器 数据选择器：能实现数据选择功能的逻辑电路。它的作用相当于多个输入的单刀多掷开关，又称“多路开关” 。 数据选择的功能：在通道选择信号的作用下，将多个通道的数据分时传送到公共的数据通道上去的。 4.4.3.1 2选1数据选择器 4.4.3.2 4选1数据选择器 4.4.3.3 8选1数据选择器(74HC151) Info\rL是低电平。 H是高电平。\r4.4.3.4 数据选择器构成查找表LUT 4.4.3.5 利用数据选择器实现函数的一般步骤:（变量数=选通端数） 将函数变换成最小项表达式 选择输入信号S2、S1、S0作为函数的输入变量 处理数据输入D0~D7信号电平。逻辑表达式中有$m_i$ ,则相应$D_i$ =1，其他的数据输入端均为0。当变量数\u003e选通端数，考虑如何将某些变量接入数据端。 ","date":"2023-01-14","objectID":"/math_electronic/:15:3","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.6 组合逻辑电路的行为级建模 ","date":"2023-01-14","objectID":"/math_electronic/:15:4","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.6.1 if-else语句 module chooser_4(S,D,Y); input [1:0]S; input [3:0]D; output reg Y; always@(D,S) begin if(S==2'b00) Y=D[0]; else if(S==2'b01) Y=D[1]; else if(S==2'b10) Y=D[2]; else Y=D[3]; end endmodule Warning\r注意，过程赋值语句只能给寄存器型变量赋值，因此，输出变量Y的数据类型定义为reg。\r","date":"2023-01-14","objectID":"/math_electronic/:15:5","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.6.2 case语句 Info\r用关键词casex和casez表示含有无关项x和高阻z的情况。\rWarning\r当分支项中的语句是多条语句，必须在最前面写上关键词begin，在最后写上关键词end，成为顺序语句块。\r4.6.2.1 对具有使能端$E_n$的4选1数据选择器行为进行Verilog描述。当$E_n$=0时，数据选择器工作，$E_n$=1时，禁止工作，输出为0。 module choose_4(S,D,Y,E); input [1:0] S; input [3:0] D; output reg Y; input E; always@(S,D,E) begin if(E==1'b1) begin case(S) 2'b00:Y\u003c=D[0]; 2'b01:Y\u003c=D[1]; 2'b10:Y\u003c=D[2]; 2'b11:Y\u003c=D[3]; endcase end else Y\u003c=1'b0 end endmodule 4.6.2.2 对基本的4线-2线优先编码器的行为进行Verilog描述。 module coder_4_2(I,Y); input [3:0]I; output reg[1:0]Y; always@(I) begin casex(I) 4'b1xxx:Y\u003c=2'b11; 4'b01xx:Y\u003c=2'b10; 4'b001x:Y\u003c=2'b01; 4'b0001:Y\u003c=2'b00; default:Y\u003c=2'bx; endcase end endmodule ","date":"2023-01-14","objectID":"/math_electronic/:15:6","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.6.3 for语句 试用Verilog语言描述具有高电平使能的3线-8线译码器. module trans_3_8(I,Y,E); input [2:0]I; input E; output reg[7:0]Y; integar k; always@(I,E) begin Y=8'b1111_1111; for(k=0;k\u003c8;k=k+1) begin if(k==I\u0026\u0026E) Y[k]=0; else Y[k]=1; end end endmodule ","date":"2023-01-14","objectID":"/math_electronic/:15:7","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.6.4 条件运算符 例：用条件运算符描述了一个2选1的数据选择器 module chooser_2_1( input [1:0]D; input sel; output reg Y; ); always@(D,sel) begin Y\u003c=sel?D[1]:D[0]; end endmodule module choose_2_1( input [1:0]D; input sel; output Y; ); assign Y\u003c=sel?D[1]:D[0]; endmodule ","date":"2023-01-14","objectID":"/math_electronic/:15:8","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.6.5 模块化设计方法 分层次的电路设计:在电路设计中，将两个或多个模块组合起来描述电路逻辑功能的设计方法。 设计方法：自顶向下和自底向上两种常用的设计方法。 4.6.5.1 四位全加器 4.6.5.1.1 半加器 module half_adder(A,B,S,C); input A,B; output reg S,C; always@(A,B) begin S\u003c=A^B; C\u003c=A\u0026B; end endmodule 4.6.5.1.2 全加器 module full_adder(A,B,Ci,S,C0); input A,B,Ci; output S,C0; wire S1,D1,D2; half_adder HA1(A,B,S1,D1); half_adder HA2(S1,Ci,S,D2); or(C0,D1,D2); endmodule 4.6.5.1.3 四位全加器 module adder_4_dig( input [3:0]A,B; input CI; output [3:0]S, output CO ) wire [2:0]C; full_adder fa0(A[0],B[0],CI,S[0],C[0]); full_adder fa1(A[1],B[1],C[0],S[1],C[1]); full_adder fa2(A[2],B[2],C[1],S[2],C[2]); full_adder fa3(A[3],B[3],C[2],S[3],CO); endmodule 5 锁存器和触发器 ","date":"2023-01-14","objectID":"/math_electronic/:15:9","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.1 双稳态电路 ","date":"2023-01-14","objectID":"/math_electronic/:16:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.1.1 基本的双稳态电路 双稳态电路是锁存器和触发器的结构组成、功能实现的基础. ","date":"2023-01-14","objectID":"/math_electronic/:16:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.2 SR锁存器 ","date":"2023-01-14","objectID":"/math_electronic/:17:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.2.1 基本SR锁存器 5.2.1.1 工作原理 5.2.1.2 真值表 5.2.1.3 变种 5.2.1.4 规律 5.2.1.5 运用 运用基本SR锁存器消除机械开关触点抖动引起的脉冲输出。 ","date":"2023-01-14","objectID":"/math_electronic/:17:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.2.2 门控SR锁存器 ","date":"2023-01-14","objectID":"/math_electronic/:17:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.3 D锁存器 ","date":"2023-01-14","objectID":"/math_electronic/:18:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.3.1 电路结构 Info\r没有圆圈的一侧是高电平的时候TG就是通路。\r","date":"2023-01-14","objectID":"/math_electronic/:18:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.3.2 逻辑功能 ","date":"2023-01-14","objectID":"/math_electronic/:18:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.4 触发器的电路结构和工作原理 共同点： 具有0 和1两个稳定状态，一旦状态被确定，就能自行保持。一个锁存器或触发器能存储一位二进制码。 不同点： 锁存器—对脉冲电平敏感的存储电路，在特定输入脉冲电平作用下改变状态。 触发器—对脉冲边沿敏感的存储电路，在时钟脉冲的上升沿或下降沿的变化瞬间改变状态 ","date":"2023-01-14","objectID":"/math_electronic/:19:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.4.1 D触发器 5.4.1.1 电路结构 两个D锁存器级联构成一个主从D触发器 主锁存器与从锁存器结构相同(但使能信号相反) TG1和TG4的工作状态相同 TG2和TG3的工作状态相同 5.4.1.2 D触发器工作原理 CP=0时： TG1导通，TG2断开——输入信号D 送入主锁存器。 Q’跟随D端的状态变化，使Q’=D TG3断开，TG4导通——从锁存器维持在原来的状态不变。 CP=1时： TG1断开，TG2导通——输入信号D 不能送入主锁存器。主锁存器维持原态不变。 TG3导通，TG4断开——主锁存器Q’的信号送从锁存器Q端。使Q=D。 触发器的状态仅仅取决于CP信号上升沿到达前瞬间的D信号！ 5.4.1.2.1 特性表 D $Q_n$ $Q_{n+1}$ 0 0 0 0 1 0 1 0 1 1 1 1 5.4.1.2.2 特性方程 $$ Q^{n+1} = D $$ 5.4.1.2.3 状态图 ","date":"2023-01-14","objectID":"/math_electronic/:19:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.4.2 JK触发器 Tip\r本质上JK触发器就是升级版的SR触发器，多了个翻转功能。\r5.4.2.1 工作原理 5.4.2.1.1 特性表 J K $Q_n$ $Q_{n+1}$ 说明 0 0 0 0 保持 0 0 1 1 保持 0 1 0 0 置0 0 1 1 0 置0 1 0 0 1 置1 1 0 1 1 置1 1 1 0 1 翻转 1 1 1 0 翻转 5.4.2.1.2 特性方程 $$ Q_{n+1} = J\\overline{ Q_{n} } + \\overline{K}Q_{n} $$ 5.4.2.1.2 状态转移图 ","date":"2023-01-14","objectID":"/math_electronic/:19:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.4.3 T触发器 5.4.3.1 工作原理 5.4.3.1.1 特性表 T Qn Qn+1 0 0 0 0 1 1 1 0 1 1 1 0 5.4.3.1.2 特性方程 $$ Q_{n+1} = T\\overline{ Q_{n} } + \\overline{T}Q_{n} $$ 5.4.3.1.3 状态转移图 ","date":"2023-01-14","objectID":"/math_electronic/:19:3","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.4.4 SR触发器 5.4.4.1 特性表 Qn S R Qn+1 0 0 0 0 1 0 0 1 0 0 1 0 1 0 1 0 0 1 0 1 1 1 0 1 0 1 1 x 1 1 1 x 5.4.4.2 特性方程 $$Q_{n+1} = S + R\\overline{ Q_{n} }$$ $$ SR = 0 $$ 5.4.4.3 状态转移图 ","date":"2023-01-14","objectID":"/math_electronic/:19:4","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.5 D触发器转换 ","date":"2023-01-14","objectID":"/math_electronic/:20:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.5.1 D触发器构成JK触发器 ","date":"2023-01-14","objectID":"/math_electronic/:20:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.5.2 D触发器构成T触发器 6 时序逻辑电路 时序逻辑电路的工作特点是任意时刻的输出状态不仅与该当前的输入信号有关，而且与此前电路的状态有关。 ","date":"2023-01-14","objectID":"/math_electronic/:20:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.1 时序逻辑电路的基本概念 ","date":"2023-01-14","objectID":"/math_electronic/:21:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.1.1 时序逻辑电路的模型与分类 6.1.1.1 时序电路的基本结构 6.1.1.2 时序逻辑电路的分类 按状态变化分类： 同步时序电路:电路状态的变化在同一时钟脉冲作用下发生，即存储电路里所有触发器有一个统一的时钟源，它们的状态在同一时刻更新。 异步时序电路:没有统一的时钟脉冲或没有时钟脉冲，电路的状态更新不是同时发生的。 按输出信号分类： 米利（Mealy）型时序电路:电路的输出是输入变量及触发器输出Q1、Q0 的函数，这类时序电路亦称为米利型电路 穆尔（ Moore）型时序电路:电路输出仅仅取决于各触发器的状态，而不受电路当时的输入信号影响或没有输入变量，这类电路称为穆尔型电路 ","date":"2023-01-14","objectID":"/math_electronic/:21:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.2 同步 时序逻辑电路的分析 ","date":"2023-01-14","objectID":"/math_electronic/:22:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.2.1 逻辑方程组 输出方程: $O＝f_1(I,S)$ 表达输出信号与输入信号、状态变量的关系式 激励方程: $E＝f_2(I,S)$ 表达了激励信号与输入信号、状态变量的关系式 状态方程: $S^{n+1}＝f_3(E,S^n)$ 表达存储电路从现态到次态的转换关系式 Note\r状态方程是由激励方程和所用的触发器的类型决定的\r6.2.2 表达过程 列出逻辑方程组 根据方程组列出状态转换真值表 将状态转换真值表化为转换表 根据转换表得状态表 根据状态表画状态转移图 6.2.2.1 例 列出逻辑方程组： 输出方程：$$X = Q_0\\overline{ Q_1 }$$ $$Y = \\overline{A} ( Q_0 + Q_1 ) $$ 激励方程：$$ D_0 = A ( Q_0 + Q_1 ) $$ $$ D_1 = A \\overline{Q_0} $$ 状态方程： $$ Q^{n+1}_{0} = A ( Q^{n}_0 + Q^{n}_1 ) $$ $$ Q_{1}^{n+1} = A \\overline{ Q_{0}^{n} } $$ 根据方程组列出状态转换真值表: A $Q_0^n$ $Q_1^n$ $Q_0^{n+1}$ $Q_1^{n+1}$ X Y 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 1 1 0 1 1 0 0 0 1 1 0 0 0 1 0 0 1 0 1 1 1 0 0 1 1 0 1 0 1 0 1 1 1 1 0 0 0 将状态转换真值表化为转换表 根据转换表得状态表 令$S^n$为$Q_0^nQ_1^n$，$S^{n+1}$为$Q_0^{n+1}Q_0^{n+1}$，4个状态为00=a，01=b，10=c，11=d，得： 根据状态表画状态转移图 ","date":"2023-01-14","objectID":"/math_electronic/:22:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.3 同步 时序逻辑电路的设计 Note\r同步时序逻辑电路的设计是分析的逆过程,其任务是根据实际逻辑问题的要求，设计出能实现给定逻辑功能的电路。\r","date":"2023-01-14","objectID":"/math_electronic/:23:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.3.1 设计同步时序逻辑电路的一般步骤 6.3.1.1 根据给定的逻辑功能建立原始状态图和原始状态表 明确电路的输入条件和相应的输出要求，分别确定输入变量和输出变量的数目和符号。 找出所有可能的状态和状态转换之间的关系。 根据原始状态图建立原始状态表。 6.3.1.2 状态化简—–求出最简状态图 合并等价状态，消去多余状态的过程称为状态化简 Info\r等价状态：在相同的输入下有相同的输出，并转换到同一个次态去的两个状态称为等价状态。\r6.3.1.3 状态编码（状态分配） 给每个状态赋以二进制代码的过程。 $2^{n-1}$ \u003c M $\\leq 2^n$ （M:状态数;n:触发器的个数） Info\r状态编码的位数即为触发器的个数\r6.3.1.4 选择触发器的类型 6.3.1.5 求出电路的激励方程和输出方程 6.3.1.6 画出逻辑图并检查自启动能力 ","date":"2023-01-14","objectID":"/math_electronic/:23:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.5 若干典型的时序逻辑电路 ","date":"2023-01-14","objectID":"/math_electronic/:24:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.5.1 寄存器和移位寄存器 在数字电路系统中，把需要处理的二进制数据或代码暂时存储起来，以便在需要的时候随时取用，这样的操作叫做寄存 6.5.1.1 8位CMOS寄存器74HC374 6.5.1.2 移位寄存器 移位寄存器是既能寄存数码，又能在时钟脉冲的作用下使数码在高低位之间移动的逻辑功能部件。 6.5.1.2.1 基本移位寄存器 6.5.1.2.2 多功能双向移位寄存器 ","date":"2023-01-14","objectID":"/math_electronic/:24:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.5.2 计数器 计数器的基本功能是对输入时钟脉冲进行计数。它也可用于分频、定时、产生节拍脉冲和脉冲序列及进行数字运算等等。 6.5.2.1 二进制计数器 Note\r$Q_0$在每个CP都翻转一次，$FF_0$可采用T=1的T触发器。 $Q_1$仅在$Q_0$=1后的下一个CP到来时翻转，$FF_1$可采用T= $Q_0$的T触发器。 $Q_2$仅在$Q_0$=$Q_1$=1后的下一个CP到来时翻转。$FF_2$可采用T= $Q_0Q_1$的T触发器。 $Q_3$仅在$Q_0$=$Q_1$=$Q_2$=1后的下一个CP到来时翻转。$FF_3$可采用T= $Q_0Q_1Q_2$的T触发器。\r6.5.2.1.1 74LVC161 用74LVC161构成九进制加计数器: 反馈清零法：利用异步置零输入端，在M进制计数器的计数过程中，跳过M-N个状态，得到N进制计数器的方法。 反馈置数法:利用同步置数端，在M进制计数器的计数过程中，跳过M-N个状态，得到N进制计数器的方法。 用74VC161组成256进制计数器: 并行进位：低位片的进位作为高位片的使能 串行进位：低位片的进位作为高位片的时钟 Info\r如果不加反相器，00001110的下个状态不再是00001111而是00011111。加了反相器使得00001110的下个状态时00001111，然后00001111的下个状态是00010000。\r","date":"2023-01-14","objectID":"/math_electronic/:24:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":null,"content":" Hello World! ","date":"2023-01-11","objectID":"/about/:0:0","tags":null,"title":"Welcome to my Blog!","uri":"/about/"},{"categories":null,"content":"Thanks for these friends 😍 ! SuperSASS\rMy mentor\r","date":"2023-01-11","objectID":"/about/:1:0","tags":null,"title":"Welcome to my Blog!","uri":"/about/"},{"categories":null,"content":"Who Am I I am particularly interested in Roman history,in which Caesar Augustus is my favorite character.I was born in September,so i named myself as Septemus.I’m just a college student and i use this site to keep my notes,that’s all. ","date":"2023-01-11","objectID":"/about/:2:0","tags":null,"title":"Welcome to my Blog!","uri":"/about/"},{"categories":null,"content":"How Old Is This Blog? 🤗 Loading days… Loading secs… ","date":"2023-01-11","objectID":"/about/:3:0","tags":null,"title":"Welcome to my Blog!","uri":"/about/"},{"categories":["Projects"],"content":"\rWarning\r此项目成员均为学生，还在开发过程中，因此相比企业级项目而言页面简陋技术落后，望看到这篇文章的高手轻喷。并且如果发现BUG或有改进建议，欢迎和我联系！\r","date":"2023-01-09","objectID":"/webrtc_communication/:0:0","tags":null,"title":"基于局域网的音视频即时聊天客户端及服务器软件设计与开发","uri":"/webrtc_communication/"},{"categories":["Projects"],"content":"摘要 本课题拟重点关注应急通信的需求，在临时搭建的局域网通信环境下，设计与开发适用于手机、平板和电脑的音视频即时聊天工具，包括客户端和服务器软件，实现无互联网环境下的局域网即时通信功能。 以下是本课题所用到的技术： HTML CSS Javascript Electron Cordova nodejs Github源代码： ","date":"2023-01-09","objectID":"/webrtc_communication/:1:0","tags":null,"title":"基于局域网的音视频即时聊天客户端及服务器软件设计与开发","uri":"/webrtc_communication/"},{"categories":["Projects"],"content":"模块介绍 ","date":"2023-01-09","objectID":"/webrtc_communication/:2:0","tags":null,"title":"基于局域网的音视频即时聊天客户端及服务器软件设计与开发","uri":"/webrtc_communication/"},{"categories":["Projects"],"content":"主服务器端 前端 前端页面的设计包括HTML+CSS的网页展示模块以及基于JavaScript前端脚本模块。 其中，前端脚本模块所做的工作如下： 利用DOM操作获取到网页中输入框的内容，并进行初步的模式匹配，以防止不合法的输入出现。 利用Ajax机制进行前后端数据通信，通过访问后端服务器所提供的接口URL来进行相关的注册、登录、信息修改以及网页跳转的工作。 在获得了后端服务器发来的成功登录的信息后，将报文中的token保存在浏览器本地的sessionStorage中，并在后续的每次访问中携带该token。 后端 后端需要引入数据库模块用于记录用户的注册信息。在本项目中使用了MySQL关系型数据库，用过JavaScript操作SQL语句进行数据的增、删、查、改操作。 服务器对外提供了登录、注册、用户信息修改的接口，以登录接口为例，登录接口的URL地址如下：http://服务器IP:服务端口号/api/login 后端提供登录、注册、信息增删的服务之前需要采取如下操作： 利用开源的joi模块进行前端所发来的数据的模式识别，以防止不合法的输入被传入数据库。 若因为注册、信息修改等操作导致用户密码被设置或修改，需要利用开源的bscryptjs模块对密码进行加密后再写入数据库，以防止泄密。在每次登录时，需要将从数据库中取出的密码解密后再与前端所发来的密码比对。 在验证用户信息后，主服务器会依据从数据库中获取到的用户信息，利用开源的jsonwebtoken模块生成一个JSON格式的token串，并将该token串以及相应的信息传输给前端，随后前端的每次带权限的请求（如获取WebRTC即时音视频服务、访问主页等）都需要携带此token，后端验证token通过后才提供相应的服务。 此外，服务器需要将前端页面所需要的所有HTML以及相关的CSS样式、JavaScript脚本文件设置成静态资源以方面用户进行访问。 ","date":"2023-01-09","objectID":"/webrtc_communication/:2:1","tags":null,"title":"基于局域网的音视频即时聊天客户端及服务器软件设计与开发","uri":"/webrtc_communication/"},{"categories":["Projects"],"content":"信令服务器端 WebRTC开发环境搭建 WebRTC目前已经被Trident、Chromium、Webkit等多种浏览器内核所支持，具有很高的兼容性，不需要额外的下载外部模块。但是，如表4-1所示，由于不同厂商在开发WebRTC项目时对同一个接口采用了不同的接口名，不同的浏览器在运行同一个WebRTC应用时可能会出现接口不适配的问题。 WebRTC标准 Chrome Firefox getUserMedia webkitGetUserMedia getUserMedia RTCPeerConnection webkitRTCPeerConnection RTCPeerConnection RTCsessionDescription RTCsessionDescription RTCsessionDescription RTCIceCandidate RTCIceCandidate RTCIceCandidate 因此，需要采用WebRTC官方提供的适配器adapter-latest.js文件才能解决如上的兼容性问题。该兼容性解决方案需要在渲染页面时引入，即在即时通话的HTML页面中使用\u003cscript src=\"adapter-latest.js\"\u003e\u003c/script\u003e语句引入适配器文件。 信令服务器端 服务器使用app.use(express.static(path.join(__dirname, ‘../public’)))语句将对外提供的HTML、CSS以及JavaScript脚本文件设置为静态资源，客户端可以通过URL来访问这些资源以获取即时通信服务。其中，app为信令服务器所创建的HTTPS服务器实例，‘public’为存放客户端文件的目录。 服务器在获取到客户端的URL后，根据URL中携带的jwt token字符进行身份校验，若token验证通过才将URL对应的资源页面提供给客户端，否则，拒绝这次请求。 使用socket.io技术实时监听客户端所发来的数据，以协助通信双方的信令交互。 服务器的处理流程如下图所示： 浏览器前端 浏览器前端的所需要完成功能则相对较多，包括获取音视频流、协商通信配置、建立P2P连接等，按照顺序可以分为以下几个步骤： 获取客户端本地的音视频流 由于针对不同的客户端以及浏览器会有不同的硬件设备，需要为这些不同的设备或浏览器提供兼容性的解决方案，因此需要引入由WebRTC官方提供的适配器模块 adapter.js。随后通过getUserMedia函数获取音视频流。 建立PeerConnection对象 在客户端的JavaScript脚本内创建PeerConnection，由于创建、协调并维持通信双方的连接。随后，将PeerConnection的ontrack成员方法与远程视频流绑定，将 PeerConnection的addStream成员方法与本地视频流绑定。 加入房间 在访问即时音视频通信服务中，会在get请求中附带room参数，在成功获取到服务后，前端会向信令服务器使用socket.io的emit函数发送一个名为rooms的事件，事 件携带的数据为get请求中room的参数。 服务器监听到rooms事件后，会将该客户加入值为room的房间，随后，该客户的所有信令信息仅在值为room的房间中转发。 协商会话描述配置 受限于通信双方的硬件设置等因素的影响，在正式通信之前通信双方需要协商通信的配置信息。主叫向被叫发送PeerConnection的成员变量 localDescription，被 叫通过使用PeerConnection的成员方法setRemoteDescription来实现主叫与被叫之间的会话描述配置。 客户端通过socket.io的emit函数发送一个名为message的事件，事件携带的参数为localDescription。 协商连接双方的网络信息 由于通信双方可能处于NAT网络之后，需要通过ICE服务器提供的内网穿透服务才能正式建立连接，因此通信双方之间需要发送RTCIceCandidate这一对象，该对象包 含的属性包括本地IP地址、公网IP地址等等所有相关网络配置信息。 该配置信息的发送是基于socke.io发送的名为message的事件来实现。 建立P2P连接 主叫通过调用PeerConnection的成员方法createOffer向被叫发起建立连接请求，被叫收到请求后可以拒绝这个请求或调用PeerConnection的成员方法createAnswer 来响应这个请求。 主叫与被叫所发送的信息都是基于socket.io的emit函数来发送一个名为message的事件。 ","date":"2023-01-09","objectID":"/webrtc_communication/:2:2","tags":null,"title":"基于局域网的音视频即时聊天客户端及服务器软件设计与开发","uri":"/webrtc_communication/"},{"categories":["Projects"],"content":"移动端 由于项目基于web开发，所以选择cordova框架进行打包移植。打包的流程大致如下： 相关的环境配置 创造cordova项目 在项目中添加移动端平台 将前端页面文件移入www文件夹 将页面布局调整以适应手机大小 在config.xml中修改权限解决跨域问题 生成app 后续实机调试 ","date":"2023-01-09","objectID":"/webrtc_communication/:2:3","tags":null,"title":"基于局域网的音视频即时聊天客户端及服务器软件设计与开发","uri":"/webrtc_communication/"},{"categories":["Projects"],"content":"核心代码 ","date":"2023-01-09","objectID":"/webrtc_communication/:3:0","tags":null,"title":"基于局域网的音视频即时聊天客户端及服务器软件设计与开发","uri":"/webrtc_communication/"},{"categories":["Projects"],"content":"注册和登录 前端 为按钮绑定ajax事件将用户输入的信息传到后端，根据后端返回信息决定下一步。 const ip = '192.168.101.108'; let login_btn = document.getElementById('login_btn'); let id = document.getElementById('id'); let password = document.getElementById('password'); $('#login_btn').on('click', function () { var params = 'id=' + id.value + '\u0026password=' + password.value; console.log(\"clicked login\") $.ajax({ type: 'post', url: 'http://' + ip + ':3007/api/login', contentType: 'application/x-www-form-urlencoded', data: params, success: function (result) { window.localStorage.setItem(result.id, result.id); sessionStorage.name = result.name; sessionStorage.id = result.id; sessionStorage.serverIP = result.serverIP; if (result.status === 0) { alert(\"登录成功,跳转至主界面\"); window.location.href = \"./HomePage.html\"; } else alert(result.message); } }) }) let register = document.getElementById('register'); let Rid = document.getElementById('Rid'); let Rname = document.getElementById('Rname'); let Rpassword = document.getElementById('Rpassword'); $('#register').on('click',function () { var params = \"id=\" + Rid.value + \"\u0026password=\" + Rpassword.value + \"\u0026name=\" + Rname.value; console.log(params) console.log('http://' + ip + ':3007/api/reguser') $.ajax({ type: 'post', url: 'http://' + ip + ':3007/api/reguser', contentType: 'application/x-www-form-urlencoded', data: params, }).then(result =\u003e { if (result.status === 0) { alert(\"注册成功,点击回到登陆界面\"); window.location.reload() } else { alert(result.message); } }) .catch(err=\u003e{ console.log(\"failure:\",err) alert('something wrong') }) }) 后端 在数据库中检索用户输入信息并执行相关操作 exports.regUser = (req, res) =\u003e { // 获取客户端提交到服务器的用户信息 const userinfo = req.body; // 定义 SQL 语句，查询用户名是否被占用 const sqlStr = 'select * from users where id=?'; db.query(sqlStr, userinfo.id, (err, results) =\u003e { // 执行 SQL 语句失败 if (err) { return res.cc(err); } // 判断用户名是否被占用 if (results.length \u003e 0) { return res.cc('用户名被占用，请更换其他用户名！', 2); } // 调用 bcrypt.hashSync() 对密码进行加密 userinfo.password = bcrypt.hashSync(userinfo.password, 10); // 定义插入新用户的 SQL 语句 const sql = 'insert into users set ?'; // 调用 db.query() 执行 SQL 语句 db.query(sql, { id: userinfo.id, password: userinfo.password, name: userinfo.name }, (err, results) =\u003e { // 判断 SQL 语句是否执行成功 // if (err) return res.send({ status: 1, message: err.message }) if (err) return res.cc(err); // 判断影响行数是否为 1 if (results.affectedRows !== 1) return res.cc('注册用户失败，请稍后再试！', 1); // 注册用户成功 res.cc('注册成功！', 0, 'http://' + ip + ':3007'); }) }) } // 登录的处理函数 exports.login = (req, res) =\u003e { console.log(\"login post received!\") const userinfo = req.body; console.log(userinfo) const sql = 'select * from users where id = ?'; db.query(sql, userinfo.id, (err, results) =\u003e { if (err) { console.log(\"error!\") return res.cc(err); } if (results.length !== 1) return res.cc('登陆失败'); //比较密码是否正确 const compare = bcrypt.compareSync(userinfo.password, results[0].password); if (!compare) return res.cc('密码输入错误'); //else return res.cc('登陆成功', 0); const user = { ...results[0], password: '', user_pic: '' };//...为展开运算符，将results[0]中所有元素赋给user //利用用户信息生成token const token = jwttoken.sign(user, jwtconfig.jwtSecretKey, { expiresIn: jwtconfig.expiresIn });//有效期为3小时 res.send({ status: 0, message: '登陆成功！', token: 'Bearer ' + token, url: 'http://' + ip + ':3007/HomePage.html', name: results[0].name, id: results[0].id, serverIP: ip }) }) } ","date":"2023-01-09","objectID":"/webrtc_communication/:3:1","tags":null,"title":"基于局域网的音视频即时聊天客户端及服务器软件设计与开发","uri":"/webrtc_communication/"},{"categories":["Projects"],"content":"用户界面 通过socket实现用户列表的显示和更新 前端 socket.on(\"connect\", () =\u003e { sessionStorage.socketID = socket.id; socket.emit('login', JSON.stringify({ 'id': sessionStorage.id, 'name': sessionStorage.name, 'sid': sessionStorage.socketID })); }); socket.on('called', (data) =\u003e { var info = JSON.parse(data); console.log('this is info inside called:',info) if (info.calledID == sessionStorage.id) { console.log('Woops,it seems you are being called!') window.blur(); setTimeout(window.focus(), 100); var r = window.confirm('您正在被' + info.callingID + '呼叫！'); if (r == false) { socket.emit('refuse', JSON.stringify({ 'name': sessionStorage.name, 'callingSid': info.callingSid })); } else { // window.open('https://' + sessionStorage.serverIP + ':8443/index.html?room=' + info.callingID+'\u0026id='+sessionStorage.id); socket.emit('agree', info.callingSid); window.location.href='https://' + sessionStorage.serverIP + ':8443/index.html?room=' + info.callingID+'\u0026id='+sessionStorage.id; } } }) socket.on('refuse', (data) =\u003e { alert(data + '拒绝了您的通话请求！'); }); socket.on('agree', () =\u003e { console.log(1); // window.open('https://' + sessionStorage.serverIP + ':8443/index.html?room=' + sessionStorage.id+'\u0026id='+sessionStorage.id); console.log('your invitation has been accepted!') window.location.href='https://' + sessionStorage.serverIP + ':8443/index.html?room=' + sessionStorage.id+'\u0026id='+sessionStorage.id; }) const socket = io(sessionStorage.serverIP + ':3007'); var table = document.getElementById('table'); socket.on('init', data =\u003e { for (var i = 0; i \u003c data.length; i++) { if (data[i].id != sessionStorage.id) { var tr = document.createElement('tr'); table.appendChild(tr); //创建Sid栏 var td_sid = document.createElement('td'); td_sid.innerHTML = data[i].sid; tr.appendChild(td_sid); //创建id栏 var td_id = document.createElement('td'); td_id.innerHTML = data[i].id; td_id.id = data[i].id; tr.appendChild(td_id); //创建name栏 var td_name = document.createElement('td'); td_name.innerHTML = data[i].name; tr.appendChild(td_name); //创建会话图标栏 var td_RTC = document.createElement('td'); //创建图标 var button = document.createElement('button'); button.addEventListener('click', () =\u003e { var data = JSON.stringify({ 'callingID': sessionStorage.id, 'calledID': td_id.id, 'callingSid': sessionStorage.socketID }); socket.emit('calling', data); }); var img = document.createElement('img'); img.setAttribute('src', '../assets/images/camera.webp'); img.setAttribute('height', '30px'); button.appendChild(img); tr.appendChild(button); } } }) socket.on('online', (data) =\u003e { var user = JSON.parse(data); if (user.id != sessionStorage.id) { //动态创建行 var tr = document.createElement('tr'); table.appendChild(tr); //创建Sid栏 var td_sid = document.createElement('td'); td_sid.innerHTML = user.sid; tr.appendChild(td_sid); //创建id栏 var td_id = document.createElement('td'); td_id.innerHTML = user.id; td_id.id = user.id; tr.appendChild(td_id); //创建name栏 var td_name = document.createElement('td'); td_name.innerHTML = user.name; tr.appendChild(td_name); //创建会话图标栏 var td_RTC = document.createElement('td'); //创建图标 var button = document.createElement('button'); button.addEventListener('click', () =\u003e { var data = JSON.stringify({ 'callingID': sessionStorage.id, 'calledID': td_id.id, 'callingSid': sessionStorage.socketID }); socket.emit('calling', data); }); var img = document.createElement('img'); img.setAttribute('src', '../assets/images/camera.webp'); img.setAttribute('height', '30px'); button.appendChild(img); tr.appendChild(button); } }); socket.on('offline', (data) =\u003e { const table = document.getElementById('table'); for (var i = 1; i \u003c table.rows.length; i++) { //console.log(table.rows[i].cells[0].innerHTML); if (table.rows[i].cells[0].innerHTML == data) table.deleteRow(i); } }); 后端 const { Server } = require(\"socket.io\"); const io = new Server(httpServer, { cors: { origin: \"*\", } }); io.on('connect', (socket) =\u003e { console.log(socket.id) io.to(socket.id).emit('init', L.toArray(l)); socket.on('login', (data) =\u003e { const info = JSON.parse(dat","date":"2023-01-09","objectID":"/webrtc_communication/:3:2","tags":null,"title":"基于局域网的音视频即时聊天客户端及服务器软件设计与开发","uri":"/webrtc_communication/"},{"categories":["Projects"],"content":"通话页面 前端 var localVideo; var localStream; var remoteVideo; //用于WebRTC连接的类 var peerConnection; var uuid; //配置ice服务器 var peerConnectionConfig = { 'iceServers': [ { 'urls': 'stun:stun.stunprotocol.org:3478' }, { 'urls': 'stun:stun.l.google.com:19302' }, ] }; function pageReady() { uuid = createUUID(); console.log('this is uuid:',uuid); localVideo = document.getElementById('localVideo'); remoteVideo = document.getElementById('remoteVideo'); socket.on('message', (message) =\u003e { if (!peerConnection) start(false); var signal = JSON.parse(message); // Ignore messages from ourself if (signal.uuid == uuid) return; console.log(`this is signal.uuid:${signal.uuid}`); if (signal.sdp) { peerConnection.setRemoteDescription(new RTCSessionDescription(signal.sdp)).then(function () { // Only create answers in response to offers if (signal.sdp.type == 'offer') { //如果收到的消息类型是offer请求，则创建一个响应来建立视频会话 peerConnection.createAnswer().then(createdDescription).catch(errorHandler); } }).catch(errorHandler); } else if (signal.ice) { peerConnection.addIceCandidate(new RTCIceCandidate(signal.ice)).catch(errorHandler); } }) var constraints = { video: true, audio: false, }; if (navigator.mediaDevices.getUserMedia) { console.log('yeah your device is ok~') navigator.mediaDevices.getUserMedia(constraints).then(getUserMediaSuccess).catch(errorHandler); } else { console.log('Your browser does not support getUserMedia API'); } } //将得到的视频流赋值给全局变量 function getUserMediaSuccess(stream) { localStream = stream; localVideo.srcObject = stream; } //前端界面start按钮绑定的事件，若点击start按钮，则执行start函数，传入参数为true，参数名为isCaller function start(isCaller) { peerConnection = new RTCPeerConnection(peerConnectionConfig); //onicecandidate是一个回调函数，用于监听访问者的ice candidate， //客户端上传自己的ice candidate，以便stun服务器协助通信 peerConnection.onicecandidate = gotIceCandidate; peerConnection.ontrack = gotRemoteStream; if(localStream) peerConnection.addStream(localStream); //若isCaller的值为true，则执行createOffer函数，向被叫发送视频连接请求 if (isCaller) { peerConnection.createOffer().then(createdDescription).catch(errorHandler); } } function gotMessageFromServer(message) { //若peerConnection变量还未创建，说明不是主叫，则通过start函数创建一个peerConnection变量来响应可能到来的offer请求 if (!peerConnection) start(false); var signal = JSON.parse(message.data); // Ignore messages from ourself if (signal.uuid == uuid) return; if (signal.sdp) { peerConnection.setRemoteDescription(new RTCSessionDescription(signal.sdp)).then(function () { // Only create answers in response to offers if (signal.sdp.type == 'offer') { //如果收到的消息类型是offer请求，则创建一个响应来建立视频会话 peerConnection.createAnswer().then(createdDescription).catch(errorHandler); } }).catch(errorHandler); } else if (signal.ice) { peerConnection.addIceCandidate(new RTCIceCandidate(signal.ice)).catch(errorHandler); } } function gotIceCandidate(event) { if (event.candidate != null) { socket.emit('message', JSON.stringify({ 'ice': event.candidate, 'uuid': uuid, 'rooms': room })); } } function createdDescription(description) { peerConnection.setLocalDescription(description).then(function () { socket.emit('message', JSON.stringify({ 'sdp': peerConnection.localDescription, 'uuid': uuid, 'rooms': room })); }); } function gotRemoteStream(event) { console.log('got remote stream'); remoteVideo.srcObject = event.streams[0]; console.log(remoteVideo.srcObject) } function errorHandler(error) { alert(error.toString()) console.log(error); } // Taken from http://stackoverflow.com/a/105074/515584 // Strictly speaking, it's not a real UUID, but it gets the job done here function createUUID() { function s4() { return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1); } return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4(); } 后端 const HTTPS_PORT = 8443; const fs = require('fs'); const serverConfig = { key: fs.readFileSync('key.pem'), cert: fs.readFileSync('cert.pem'), }; // ---------------------------------------------------------------------------------------- var express = require('express'); const app = express(); cons","date":"2023-01-09","objectID":"/webrtc_communication/:3:3","tags":null,"title":"基于局域网的音视频即时聊天客户端及服务器软件设计与开发","uri":"/webrtc_communication/"},{"categories":["Projects"],"content":"成品效果 ","date":"2023-01-09","objectID":"/webrtc_communication/:4:0","tags":null,"title":"基于局域网的音视频即时聊天客户端及服务器软件设计与开发","uri":"/webrtc_communication/"},{"categories":["Projects"],"content":"pc端 ","date":"2023-01-09","objectID":"/webrtc_communication/:4:1","tags":null,"title":"基于局域网的音视频即时聊天客户端及服务器软件设计与开发","uri":"/webrtc_communication/"},{"categories":["Projects"],"content":"移动端 ","date":"2023-01-09","objectID":"/webrtc_communication/:4:2","tags":null,"title":"基于局域网的音视频即时聊天客户端及服务器软件设计与开发","uri":"/webrtc_communication/"},{"categories":["college"],"content":"\rAttention\r由于2022年考核形式特殊，不具备普适性，本文对试卷原题略有修改，使其与一般情况下OJ模式吻合。\rWarning1\r本人能力有限，代码可能有错误。若读者发现欢迎联系我指出！\rWarning2\r机考和ACM、蓝桥杯之类的编程比赛有差别，不是通过了测试点就得分。改卷老师会参考代码的具体书写情况。极不推荐考生使用qsort、bsearch等库函数图方便！\r","date":"2022-09-12","objectID":"/jikao/:0:0","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"1.序列生成 ","date":"2022-09-12","objectID":"/jikao/:1:0","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"题目要求 写程序,在屏奉上打印出如下序列的前100项。(20 分) 序列的第一、二项分别为2和3: 序列后继项如下生成: 若序列的最后两项的乘积为一位数,则该一位数即为后续项: 若序列的最后两项的乘积为两位数,则该两位数的十位数字和个位数字分别为后续项的连续两项。 要求输出格式为\"%2d\",每行输出 10 个数,共10 行 解决思路：建立一个一位数组，从第三个元素开始遍历，每个元素的值都取决于前两个元素的乘积。 测试输入： 无 测试输出： 2 3 6 1 8 8 6 4 2 4 8 3 2 6 1 2 2 4 8 3 2 6 1 2 2 4 8 3 2 6 1 2 2 4 8 3 2 6 1 2 2 4 8 3 2 6 1 2 2 4 8 3 2 6 1 2 2 4 8 3 2 6 1 2 2 4 8 3 2 6 1 2 2 4 8 3 2 6 1 2 2 4 8 3 2 6 1 2 2 4 8 3 2 6 1 2 2 4 8 3 Source Code: #include\u003cstdio.h\u003e #include\u003cstdlib.h\u003e #pragma warning(disable:4996) #define _for(a,b,c) for(a=b;a\u003cc;++a) int main(void) { int arr[105] = { 2,3 },i,t; _for(i, 2, 100) { t = arr[i - 1] * arr[i - 2]; if (t \u003c 10) arr[i] = t; else arr[i] = t / 10,arr[++i]=t%10; } _for(i, 1, 101) { printf(\"%2d\", arr[i - 1]); if ( !(i % 10)) putchar('\\n'); } return 0; } ","date":"2022-09-12","objectID":"/jikao/:1:1","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"2.字符串除重 ","date":"2022-09-12","objectID":"/jikao/:2:0","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"题目要求 从键盘输入一个字符串(长度不超过80个字符),将串中连续相同的字符只保留一个并生成新的字符串,最后输出生成的新字符串,要求定义函数 void cvt(char* s,char* t)实现操作输入输出格式 %s”。(20 分) 测试输入: aabbcccstbbbba 测试输出: abcstba 解决思路：定义前置字符ch=s[0],从i=1开始遍历，若s[i]!=ch则t的最后一项=s[i]同时ch=s[i]，否则略过 Source Code: #include\u003cstdio.h\u003e #include\u003cstdlib.h\u003e #include\u003cstring.h\u003e #pragma warning(disable:4996) #define _for(a,b,c) for(a=b;a\u003cc;++a) #define MAXN 85 void cvt(char* s, char* t); int main(void) { //freopen(\"d:\\\\test.txt\", \"r\", stdin); char str[2][MAXN] = { 0 }; scanf(\"%s\", str[0]); cvt(str[0], str[1]); printf(\"%s\", str[1]); return 0; } void cvt(char* s, char* t) { char ch =*(t++) =*(s++); while (*s) { if (ch != *s) { ch = *s; *(t++) = ch; } ++s; } } ","date":"2022-09-12","objectID":"/jikao/:2:1","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"3.矩阵排序 ","date":"2022-09-12","objectID":"/jikao/:3:0","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"题目要求 给定m行n列整数矩阵,编写函数,以该矩阵作为参数(假定m,n 己用define 定义为整型常量),实现如下要求:(20 分) 每行元素按由小到大顺序存储; 各行以第1列元素为关键字,按该关键字由小到大次序存储各行； 要求只写出函数(不要求实现矩阵的输入与输出),可以定义其它辅助函数。 示例矩阵:3-5 12 -7 函数处理后矩阵:19 0 5 5 8 2 10 6 153 12 49 550 2 68 10 测试输入: 无 测试输出: -9 0 5 5 -7 -5 3 12 -2 6 8 10 解决思路：先单独对数组的每一行排序，再根据每行首元素大小对行排序（通过交换两行中每个相同位置的元素实现行的交换）。 裁判程序: #include\u003cstdio.h\u003e #include\u003cstdlib.h\u003e #include\u003cstring.h\u003e #pragma warning(disable:4996) #define _for(a,b,c) for(a=b;a\u003cc;++a) #define m 3 #define n 4 void reshape(int matrix[m][n]); void prtma(int matrix[m][n]) { int i, j; _for(i, 0, m) { _for(j, 0, n) { printf(\"%2d\", matrix[i][j]); if (j \u003c n - 1) putchar(' '); else putchar('\\n'); } } } int main(void) { //freopen(\"d:\\\\test.txt\", \"r\", stdin); int matrix[m][n] = { 3,-5,12,-7,8,-2,10,6,-9,5,5,0 }; reshape(matrix); prtma(matrix); return 0; } //your source code here: Source Code: void reshape(int matrix[][n]) { int i,j,k; _for(k, 0, m) { _for(i, 1, n) { int t = matrix[k][i]; for (j = i - 1; j \u003e= 0; --j) { if (matrix[k][j] \u003e t) matrix[k][j + 1] = matrix[k][j]; else break; } matrix[k][j + 1] = t; } } _for(i, 1, m) { int t = matrix[i][0]; for (j = i - 1; j \u003e= 0; --j) { if (matrix[j][0] \u003e t) { int t1; _for(k, 0, n) { t1 = matrix[j][k]; matrix[j][k] = matrix[j + 1][k]; matrix[j + 1][k] = t1; } } else break; } } } ","date":"2022-09-12","objectID":"/jikao/:3:1","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"4.递归计算 ","date":"2022-09-12","objectID":"/jikao/:4:0","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"题目要求 给定自然数n,函数f(n)定义如下： f(0)=0, f(1)=1, f(2n)=f(n) f(2n+1)=f(n)+f(2n-1) 定义递归函数，计算f(n).(10分) 定义非递归函数，计算f(n).(10分) 测试输入： 1984 测试输出： 69 解决思路： 递归函数按照题目要求即可，非递归函数可建立一个数组从i=2开始递推。 裁判程序： #include\u003cstdio.h\u003e #include\u003cstdlib.h\u003e #include\u003cstring.h\u003e #pragma warning(disable:4996) #define _for(a,b,c) for(a=b;a\u003cc;++a) long long func(int n); int main(void) { //freopen(\"d:\\\\test.txt\", \"r\", stdin); int n; scanf(\"%d\", \u0026n); printf(\"%lld\", func(n)); return 0; } //your source code here: Source Code: long long func(int n) { if(n\u003c2) return n; if (n % 2) return func(n / 2) + func(n - 2); else return func(n / 2); } Source Code: long long func(int n) { static long long dp[10005] = { 0,1 }; if (n \u003c 2) return n; else { int i; _for(i, 2, n + 1) { if (i % 2) dp[i] = dp[i / 2] + dp[i - 2]; else dp[i] = dp[i / 2]; } return dp[n]; } } ","date":"2022-09-12","objectID":"/jikao/:4:1","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"5.处理学生成绩文件 ","date":"2022-09-12","objectID":"/jikao/:5:0","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"题目要求 通过文件\"a.txt\"输入若干行学号、姓名、成绩，将每个学生信息存储于单向链表结点，要求节点连接次序为成绩由大到小次序。将结点按连接次序输出到文件\"b.txt\"。 测试输入文件\"a.txt\"（数据的分隔符为空格和换行）： 1001 张三 72 1002 王晓华 80 1003 Alice 55 1004 欧阳文修 95 测试输出文件\"b.txt\": 1004 欧阳文修 95 1002 王晓华 80 1001 张三 72 1003 Alice 55 解题思路：输入完一个结点，就把这个结点插入到链表的正确位置，这样输入完后链表就是有序的，就可以直接输出到b文件。 Wrong answer\r据改卷老师说法，此题不能采用先把结点排好序再连成链表，或者先连成链表再在链表上排序的做法。\rSource Code: #include\u003cstdio.h\u003e #include\u003cstdlib.h\u003e #include\u003cstring.h\u003e #pragma warning(disable:4996) #define _for(a,b,c) for(a=b;a\u003cc;++a) typedef struct node { int id, grd; char name[25]; struct node* next, * last; }node; typedef struct list { node* head; }list; list* crtl(); node* crtn(int id, int grd, char* n); void clear(list* l); int main(void) { FILE* fp = fopen(\"d:\\\\a.txt\", \"r\"); list* L = crtl(); int id, grd; char tn[25]; node* p; while (fscanf(fp, \"%d %s %d\", \u0026id, tn, \u0026grd) != EOF) { node* newn = crtn(id, grd, tn); for (p = L-\u003ehead; p-\u003enext \u0026\u0026 p-\u003enext-\u003egrd \u003e grd; p = p-\u003enext); newn-\u003enext = p-\u003enext; p-\u003enext = newn; } fclose(fp);fp = fopen(\"d:\\\\b.txt\", \"w\"); p = L-\u003ehead-\u003enext; while (p) { fprintf(fp, \"%d %s %d\\n\", p-\u003eid, p-\u003ename, p-\u003egrd); p = p-\u003enext; } fclose(fp);clear(L); return 0; } list* crtl() { list* L = (list*)malloc(sizeof(list)); L-\u003ehead = crtn(0, 0, \"H\"); return L; } node* crtn(int id, int grd, char* n) { node* ret = (node*)malloc(sizeof(node)); ret-\u003eid = id, ret-\u003egrd = grd; strcpy(ret-\u003ename, n); ret-\u003enext = ret-\u003elast = NULL; return ret; } void clear(list* l) { node* p = l-\u003ehead, * t; while (p) { t = p; p = p-\u003enext; free(t); } free(l); } ","date":"2022-09-12","objectID":"/jikao/:5:1","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"\rWarning\r本文信息来自个人经历、部分同学分享、学院公告，无法涵盖有关转专业的所有内容。由于未进行全面调查，文中的观点主观性较强。欢迎各位读者指正谬误或遗漏之处，本文也将逐渐更新完善！\rNote\r暂时不深入涉及转专业成功以后流程。\r","date":"2022-09-12","objectID":"/changemajor/:0:0","tags":null,"title":"西南交通大学转码（计算机学院）心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"前言 高考失利后，我不出意外的和CS相关的专业失之交臂，那时我便做好了转专业的打算。转专业的难度和压力不亚于高考，经历一年的考验我已转入软件工程专业。转专业的过程充满了各种不确定性，信息的匮乏经常使我感到迷茫。因此我趁着目前较为充裕的时间，将关于转专业（特别是计院）的信息进行汇总，并分享自己的心得体会。希望这篇文章对想转入计算机学院的同学有所帮助。 ","date":"2022-09-12","objectID":"/changemajor/:1:0","tags":null,"title":"西南交通大学转码（计算机学院）心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"个人介绍 年级：2021级 原专业：数学与应用数学 转入专业：软件工程 ","date":"2022-09-12","objectID":"/changemajor/:2:0","tags":null,"title":"西南交通大学转码（计算机学院）心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"利弊 我想，既然打开了此篇文章的同学，大部分做好了充分的思想准备，但是不是每一名同学都具备转计院成功的精力和能力，并且即使具备也不能断言转计院就是全局最优解，或是适合进行计算机方面的学习和工作。同时我也面向思想正在动摇，对于自己是否应该转计院犹豫不决的同学，说不定你看下去会觉得这是个宝贵的机会。 ","date":"2022-09-12","objectID":"/changemajor/:3:0","tags":null,"title":"西南交通大学转码（计算机学院）心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"好处： 行业前景： 以下是19-21年国家统计局发布的各行业就业人员平均工资： 可见IT行业在具有最高平均工资水平的同时，依然维持较高增速。而计院专业主要面向IT行业中最热门的互联网行业。 计院三个专业虽上层建筑不同，但都以CS为基础，因此认真完成本科阶段学习的同学在进入IT行业工作时具备了其他专业同学所望尘莫及的编程能力和牢固基础。三个专业毕业后就业方向主要分为：前端，后端，全栈，算法，嵌入式，每一个方向都有很高的技术要求，面试官更注重应聘者的编程实力而不是文凭或者交际能力，一般来说本科毕业想直接工作就需要提前选择一个方向进行深入练习。 本校就业情况\r根据计算机学院某知名教授透露，软件工程2018级（本科）毕业生签约合同上的平均年薪15万。软件工程15-17级(本科)毕业生平均年薪为17万。其中水平较高者收获了50万以上年薪。\r实现超越： 相信有很多同学和我一样，高考分数可以上这个学校，但不能上这个学校的计算机专业。如果要上计算机专业的话只能退而求其次选择双非学校。 2021年我校所有专业里面计算机是收分最高的，我校在很多省份录取的高考最高分的同学都选择就读计算机专业。 如果转专业成功就同时获得可以读满意的学校和满意的专业。鉴于计算机类年年攀升的录取分数，转专业可以通过一年的劳动实现获得自己想学专业的本科学位，而如果跨考研究生或毕业后再参加培训班则不得不浪费四年的时间学习与自己志向无关的知识（前提是你今后想成为程序员），或只好改变志向。 换句话说，转专业等效于用一年的时间和精力换取高考多几分的待遇。 多样考核： 以计院为例，转专业将参考学生的准入课、四级、机考、面试成绩，可以说是考察了学生全方面的能力，即使学生在某一方面实力并不突出，也可以通过其他方面弥补。 如有同学在机考（实际上因为疫情变成笔试）中发挥糟糕，但还是凭借较高的准入课分和四级分稳住了排名。同时还有和我一起参加考核的同学在面试前的排名中居于末尾，结果凭借出彩的面试表现提高了自己的排名从而被录取。 因此我认为计院的转专业制度具有较好的容错性。多样的考核机制使得失误的影响降低了。 ","date":"2022-09-12","objectID":"/changemajor/:3:1","tags":null,"title":"西南交通大学转码（计算机学院）心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"坏处： 不确定性： 这一点我深有体会，转专业的各方面信息经常残缺且自相矛盾。考前咨询老师的问题很少得到正面答复。在准备的过程中对于自己是否合格也始终无法得到准确的答案。更可怕的是因为极端原因突然修改了考核方式，这一点我深有体会：因为疫情机考和面试改为线上进行，但是机考竟然变成了手写代码的形式，一方面失去了编译器的检查功能，另一方面大大增强了改卷的主观性。而且老师拒绝回复关于题型的问题（有没有选择填空都不说），我直到拿到卷子才知道没有选择填空。 这些不确定性会让你做不少的无效劳动，有时甚至让你感到愤怒。 沉没成本： 学习不是大学生活的全部，阅读、运动、社交、兴趣爱好同样是大学生活的一部分，而转专业会占据你大量的空余时间，结果便是你需要延续高三的学习强度，无法在时间最充裕的一年级体会丰富的大学生活。而如果转专业以失败告终，那你大一失去的时间、付出的精力将付诸东流。 心理压力： 转专业的欲望越强烈，越容易受到外界扰动的刺激，心理压力也越大。你白天学习的时候会忍不住浏览论坛搜寻其他同学对于转专业的讨论，然后被一些危言耸听搞得六神无主，结果因为焦虑无法集中注意力。晚上会翻来覆去思索转专业失败的对策，无法入睡。和亲友交谈时，你得到了鼓励却感觉是难以实现的期望，你得到了安慰却感觉是失败主义的灌输。这都是你需要承受的心理包袱，它们可能会损害你的身体健康和人际关系。 适应变化： 即使转专业成功也要面临专业现实情况和自己想象的落差。一方面，需要补大一没上的必修课，导致平时作业多时间紧（但计院早八确实很少）。另一方面，迁移到新的集体中需要适应这个集体的管理特点（各学院和班级有截然不同的氛围）。另一方面，需要处理转专业成功后繁琐的事务，比如课程替代，团组织身份转移，重新选课。 Dormitary\r关于寝室：若住在犀浦，学校不会安排更换寝室，若要更换寝室需要走常规流程（一般很不容易）。若住在九里，学校会安排更换寝室，学生自主表决。若同意，去哪个寝室取决于人数情况，和同专业同学是舍友概率较小。 更换寝室手续非常繁琐而且牵扯搬运生活用品。并且最终如果舍友和自己专业不一样的话会出现作息时间冲突的问题。\rTL:DR\r对于有志进入IT业（特别是互联网、软件业）的同学来说，转专业是花费时间最短，以能力为唯一标准的机会。然而想把握住这个机会需要持之以恒的努力、大一处于持续紧张的精神状态。同时，机遇与风险共存，走上转专业的道路就要做好迎接失败的心理准备。\r","date":"2022-09-12","objectID":"/changemajor/:3:2","tags":null,"title":"西南交通大学转码（计算机学院）心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"指标 即使你经过权衡利弊后，认为转计院是个好主意，也不能忽视你将面临的挑战。很多同学被会问诸如XX转计算机好转吗之类的问题，我在这里与其给出一个“很卷”、“还行”的答案，不如把成功的指标展示出来，你在心里对难度做评估。 ","date":"2022-09-12","objectID":"/changemajor/:4:0","tags":null,"title":"西南交通大学转码（计算机学院）心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"录取比例 2021年90人参加机考，36人进入面试，20人被录取。 进入面试比例为40%，录取比例为22%。 2022年77人参加机考，30人进入面试，25人被录取。 进入面试比例为39%，录取比例为32%。 ","date":"2022-09-12","objectID":"/changemajor/:4:1","tags":null,"title":"西南交通大学转码（计算机学院）心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"能力要求（以2022年被录取学生为准） 准入课成绩平均分： 高等数学I （数学分析I）：92.52 高等数学II（数学分析II) ：95.80 线性代数B (高等代数I和高等代数II中较高的一门)：93.76 四级成绩平均分：570.04 机考平均分：78.6 六级通过人数：16 必修课算术平均分：88.4412 ","date":"2022-09-12","objectID":"/changemajor/:4:2","tags":null,"title":"西南交通大学转码（计算机学院）心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"误区 唯原专业排名论 这里简称原专业排名为原排。 事实上，原排的重要性在各大论坛（尤其是贴吧）被夸大了，几乎每一个询问转计院的帖子都会强调原排的重要性，甚至有人夸张地声称只有每个学院第一第二名才有机会。 然而原专业排名既不是门槛，也不是直接指标，只是面试时的参考因素。2022年没有出现因为低原排而不让同学参加机考的情况。筛选同学进入面试时，只根据准入课、四级、机考三项指标，无视原排。我在面试时老师也没有询问我的原排。鉴于面试占总分的25%，而原排只是面试时的参考因素之一，可以得出结论原排不是转计院的决定因素，更不可能出现其他方面优秀，因为原排低而被淘汰的现象。 证据方面，我通过比对往年录取名单，发现既有同学原排极高被淘汰，又有同学原排甚至未达前40%而被录取。 专业区别论 我一开始以为三个专业分别有自己的名额，并且报不同的专业就不在一起排名。在这个假设之下，我根据报CS的人数远多于报软工的人数，而去年AI招收人数远少于SE招收人数，我得出了报SE会增加录取机会的错误结论。 事实上我的假设一开始就是错的，并且我发现论坛上也有这种假设。参加转计院的所有学生会一起排名，报考的专业不会对成功率有任何影响。最终录取也是学院按照总分排名从高到低选拔。假如计院录取名额为N，那么有且仅有总分排名前N的同学被录取，即使他们全部都报CS也不会有任何影响。 ","date":"2022-09-12","objectID":"/changemajor/:4:3","tags":null,"title":"西南交通大学转码（计算机学院）心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"流程 ","date":"2022-09-12","objectID":"/changemajor/:5:0","tags":null,"title":"西南交通大学转码（计算机学院）心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"相关公告 转专业管理办法 点击图片下载PDF文件\r无论转入哪个学院，该文件都交代了一些基本的原则和注意事项。 转专业细则 一般大一上学期教务网会发布各学院的转专业实施细则，辅导员也会通知。建议结合往年的细则获得更全面的信息。 细则中将会给出准入课程，成绩计算公式，录取名额，时间安排等关键信息，最好反复仔细阅读。 2021年计算机与人工智能转专业实施细则 2022年各学院转专业实施细则 隐藏信息 计算机学院的网站上发布的关于其他事件的公告有的隐藏有对转专业有用的信息。这些信息可能没有在转专业细则上提及，也没有在这些公告的标题上提及，更没有人员专门通知。如在关于CCF CSP考试的公告文件里指出了免机考条件： Warning\r由于有同学反映学校不认可CSP成绩，此类隐藏信息最好通过联系学院老师查证!\r","date":"2022-09-12","objectID":"/changemajor/:5:1","tags":null,"title":"西南交通大学转码（计算机学院）心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"提交申请 上图通知发布后便可按照指示提交转专业申请，在截止时间之前可对申请表进行修改或取消申请。鉴于六级成绩公布时间接近截止时间，建议出六级成绩在申请表上填写六级成绩。 Dont worry\r在转专业录取名单公布之前，该申请表会一直处于未审核状态。因此不用因此焦虑。\r","date":"2022-09-12","objectID":"/changemajor/:5:2","tags":null,"title":"西南交通大学转码（计算机学院）心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"机考通知 开学前后一个星期，计院官网将会公布机考和面试的时间安排 此时也会有短信通知(按照惯例应公布考场，但22年因疫情改为线上进行) Danger\r若未收到短信，建议这段时间检查一下手机是否拦截了通知。我亲眼所见一名同学因短信被拦截而错过了加群的时间直接导致丧失资格。\r","date":"2022-09-12","objectID":"/changemajor/:5:3","tags":null,"title":"西南交通大学转码（计算机学院）心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"机考（基于2020-2022） 时间限制：2小时 题型：编程 难度：约等于二级C语言考试，或各大OJ平台入门题难度 考查范围：C语言程序设计基础知识（结构化程序设计、文件操作、指针）、链表操作（不会考其他数据结构或算法） 考试环境： 学校机房，装有vs2019，代码提交后不会告知通过情况(线下形式) 正面+侧面两个设备进入腾讯会议并开启摄像头，手写代码（2022年的线上形式，我估计不会重现) 真题： 2021年机考真题敬请参阅supersass的文章 2022年计算机与人工智能学院转专业机考试题 Future plan\r信院的转专业机考和计院考察范围一致，内容和形式虽有差别，但要求的能力一样。日后本文将补充2022年信息与技术学院转专业机考试题。\r","date":"2022-09-12","objectID":"/changemajor/:5:4","tags":null,"title":"西南交通大学转码（计算机学院）心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"面试 学院将根据成绩计算公式算出综合分进行排名，划定名额后按排名从高到低选拔学生进入面试。 面试短信通知： 面试院网通知： 面试考核内容： 限制在1分钟内的自我介绍 用英语回答一个问题：Please describe your hometown. 原专业的相关信息 针对自我介绍中的信息提问，如我参加了程序设计竞赛问我的参赛经历，参加了数学建模问我在队伍中担任的角色 若评委老师没有其他问题则面试结束 Limit\r可能是因为排在后面，我的面试仅持续了6分钟就结束了，问的问题也不全面，如果有同学想分享自己的面试经历欢迎联系我\r","date":"2022-09-12","objectID":"/changemajor/:5:5","tags":null,"title":"西南交通大学转码（计算机学院）心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"结果公示 面试结束后不久，院网就会发布拟录取名单。至此，无论结果如何，转专业的斗争也就画上了句号。 ","date":"2022-09-12","objectID":"/changemajor/:5:6","tags":null,"title":"西南交通大学转码（计算机学院）心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"建议 个人认为重要性：机考\u003e准入课\u003e四级成绩\u003e课外经历\u003e通过六级\u003e原专业排名，鉴于22年情况特殊，机考在纸上进行，很多准备充分的同学也未获得较高的机考成绩。但通常情况下机考在电脑上操作，因为拥有编译器的检查机制，同时可以自己调试从而减少了意外情况的发生，可以充分发挥实力。同时机考题目难度很低，掌握C语言的语法并大量刷题，就能很轻易拿到满分，给自己带来巨大优势。 若有多余时间最好参加竞赛或学习做项目。如参加程序设计竞赛、数学建模，写个贪吃蛇的小游戏之类的。这些不一定要做到极致，比如我大一参加的三个竞赛名气都不大，拿的奖项也不突出。但可避免自己在面试时处于被动（面试有很大概率询问计算机相关课外经历） ","date":"2022-09-12","objectID":"/changemajor/:6:0","tags":null,"title":"西南交通大学转码（计算机学院）心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"总结 以上是我历时一年成功转码的全部心得，希望能让将踏上我的道路的同学对于转计院有个全面的认识。 此篇文章存在很多疏漏之处，欢迎联系我指出，我也会逐渐完善。 最后祝各位想转计院的同学能通过努力实现自己目标！ Share\r喜欢这篇文章的读者若能分享给其他读者我将感激不尽！\r","date":"2022-09-12","objectID":"/changemajor/:7:0","tags":null,"title":"西南交通大学转码（计算机学院）心得分享","uri":"/changemajor/"}]